import Foundation

// This file was generated by json2swift. https://github.com/ijoshsmith/json2swift
// and modified by hand...

//
// MARK: - Data Model
//
struct KrakowApiResponse : CreatableFromJSON{
    let lastUpdate: Date
    let vehicles: [KrakowVehicle]
    init(lastUpdate: Int, vehicles: [KrakowVehicle]) {
        let lastUpdateInMiliSecconds = TimeInterval(lastUpdate)
        let lastUpdateInSecconds = TimeInterval(lastUpdateInMiliSecconds / 1000.0)
        
        self.lastUpdate = Date(timeIntervalSince1970:lastUpdateInSecconds)
        self.vehicles = vehicles
    }
    init?(json: [String: Any]) {
        guard let lastUpdate = json["lastUpdate"] as? Int else { return nil }
        guard let vehicles = KrakowVehicle.createRequiredInstances(from: json, arrayKey: "vehicles") else { return nil }
        self.init(lastUpdate: lastUpdate, vehicles: vehicles)
    }
}

struct KrakowVehicle: CreatableFromJSON {
    let id: String
    let category: String?
    let color: String?
    let heading: Int?
    let isDeleted: Bool?
    let latitude: Int?
    let longitude: Int?
    let name: String?
    let path: [KrakowVehiclePath]?
    let tripId: String?
    init(category: String?, color: String?, heading: Int?, id: String, isDeleted: Bool?, latitude: Int?, longitude: Int?, name: String?, path: [KrakowVehiclePath]?, tripId: String?) {
        self.category = category
        self.color = color
        self.heading = heading
        self.id = id
        self.isDeleted = isDeleted
        self.latitude = latitude
        self.longitude = longitude
        self.name = name
        self.path = path
        self.tripId = tripId
    }
    init?(json: [String: Any]) {
        let id = json["id"] as? String ?? "unable_to_parde key: id"
        let category = json["category"] as? String
        let color = json["color"] as? String
        let heading = json["heading"] as? Int
        let isDeleted = json["isDeleted"] as? Bool
        let latitude = json["latitude"] as? Int
        let longitude = json["longitude"] as? Int
        let name = json["name"] as? String
        let path = KrakowVehiclePath.createRequiredInstances(from: json, arrayKey: "path")
        let tripId = json["tripId"] as? String
        self.init(category: category, color: color, heading: heading, id: id, isDeleted: isDeleted, latitude: latitude, longitude: longitude, name: name, path: path, tripId: tripId)
    }
}

struct KrakowVehiclePath: CreatableFromJSON {
    let angle: Int
    let length: Double
    let x1: Int
    let x2: Int
    let y1: Int
    let y2: Int
    init(angle: Int, length: Double, x1: Int, x2: Int, y1: Int, y2: Int) {
        self.angle = angle
        self.length = length
        self.x1 = x1
        self.x2 = x2
        self.y1 = y1
        self.y2 = y2
    }
    init?(json: [String: Any]) {
        guard let angle = json["angle"] as? Int else { return nil }
        guard let length = Double(json: json, key: "length") else { return nil }
        guard let x1 = json["x1"] as? Int else { return nil }
        guard let x2 = json["x2"] as? Int else { return nil }
        guard let y1 = json["y1"] as? Int else { return nil }
        guard let y2 = json["y2"] as? Int else { return nil }
        self.init(angle: angle, length: length, x1: x1, x2: x2, y1: y1, y2: y2)
    }
}


struct TrueVehicle {
    let id: String
    let category: String
    let color: String
    let heading: Int
    let latitude: Int
    let longitude: Int
    let name: String
    let path: [KrakowVehiclePath]?
    let tripId: String
    
    init(vehicle:KrakowVehicle) {
        id          = vehicle.id
        category    = vehicle.category!
        color       = vehicle.color!
        heading     = vehicle.heading!
        latitude    = vehicle.latitude!
        longitude   = vehicle.longitude!
        name        = vehicle.name!
        path        = vehicle.path
        tripId      = vehicle.tripId!
    }
}

extension VehicleType {
    init(vehicle: TrueVehicle) {
        switch vehicle.category {
        case "tram":
            self = .Tram
        default:
            self = .Unknown
        }
    }
}

extension TData {
    init(vehicle: TrueVehicle, date: String) {
        lat = Double(vehicle.latitude)  / 3_600_000.0
        lon = Double(vehicle.longitude) / 3_600_000.0
        
        lines = vehicle.name.components(separatedBy: " ").first!
        fullLines = vehicle.name
        
        brigade = "\(vehicle.tripId): \(vehicle.name)"
        
        time = date
        
        type = VehicleType(vehicle: vehicle)
    }
}
